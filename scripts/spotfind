#!/usr/bin/env python

import numpy as np
from glob import glob
from natsort import natsorted
from scipy import ndimage

from PIL import Image
from electrolysis import align

# -----------------------------------------------------------------------------
CAMERA_DIST = 60832.0             # pixels
CAMERA_CENT = (512. / 2.,) * 2    # pixels
CAMERA_SIZE = (512, 512)          # pixels
WAVELENGTH  = 0.0030              # Angstrom
YAW = 0.0 # for now
# -----------------------------------------------------------------------------


def rotate(pitch, yaw):

    # ccw around y 
    R_yaw   = np.array([[ np.cos(yaw), 0.0, np.sin(yaw) ],
                        [         0.0, 1.0,         0.0 ],
                        [-np.sin(yaw), 0.0, np.cos(yaw) ] ])

    # ccw around x
    R_pitch = np.array([[ 1.0,           0.0,            0.0 ],
                        [ 0.0, np.cos(pitch), -np.sin(pitch) ],
                        [ 0.0, np.sin(pitch),  np.cos(pitch) ] ])

    # yaw 1st
    return R_pitch * R_yaw


def xyz_grid(shape, center, z_offset):

    mg = np.mgrid[0:shape[0]-1:1j*shape[0], 0:shape[1]-1:1j*shape[1]]
    xy = mg - np.array( center[:,None,None] ) 
    z  = np.ones((1, shape[0], shape[1])) * z_offset

    return np.concatenate((xy,z), axis=0)



def real_to_recip(xyz):
    """
    assume xyz is (N,3)
    """
    beam_vector = np.array([0.0, 0.0, 1.0])
    norm = np.sqrt( np.sum( np.power(xyz, 2), axis=1 ) )
    S = xyz / norm[:,None]
    q = (2.0 * np.pi / WAVELENGTH) * (S - beam_vector)
    assert q.shape == xyz.shape, 'q-shape incorrect'
    return q



files = glob('./ANDOR*.tif')
print 'located %d images...' % len(files)

print 'writing to file: spotfinder.txt'

buf = open('/u/xl/tjlane/analysis/spotfinder.txt', 'w')
buf.write("# all units in inverse Angstrom\n")
buf.write("# qx\t\tqy\t\tqz\t\tdx\t\tdy\n")
buf.write("# " + "--\t\t" * 5 + "\n")


for f in natsorted(files):

    # read the image file
    pitch = float(f.split('Pitch-')[-1].split('_')[0])
    tif   = Image.open(f)
    img   = np.fromstring(tif.tostring(), 'H').reshape(512,512)

    # find the blobs
    img = ndimage.filters.gaussian_filter(img, 2.0)
    centers, widths = align.find_blobs(img, discard_small_blobs=5,
                         sigma_threshold=3.0, discard_border=50)

    print 'pitch %f --> %d spots' % (pitch, len(centers))
    if len(centers) < 1: continue
    
    # compute geom of spots in recip space
    xy = np.array(centers) - np.array(CAMERA_CENT)
    z = np.ones(xy.shape[0]) * CAMERA_DIST
    xyz = np.vstack([xy.T, z.T]).T
    q_xyz = real_to_recip(xyz)
    
    # rotate to account for crystal orientation
    R = rotate(pitch, YAW)
    q_xyz = np.dot(R, q_xyz.T).T

    # save spot positions
    for i,c in enumerate(centers):
        buf.write('%f\t%f\t%f\t%d\t%d\n' % (q_xyz[i,0], q_xyz[i,1], q_xyz[i,2],
                                            widths[i][0], widths[i][1]))

print "finished spotfindin'"



