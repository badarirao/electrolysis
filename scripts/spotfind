#!/usr/bin/env python

import numpy as np
from glob import glob
from natsort import natsorted
from scipy import ndimage

from PIL import Image
from electrolysis import align
from electrolysis import geometry as geo

# -----------------------------------------------------------------------------
CAMERA_DIST = 3.3e6 / (40.0*2)             # pixels
CAMERA_CENT = (245.5,264.0)      # pixels
CAMERA_SIZE = (512, 512)          # pixels
WAVELENGTH  = 0.0030              # Angstrom
YAW = 0.0 # for now
# -----------------------------------------------------------------------------



files = glob('./*.tif')
print 'located %d images...' % len(files)

print 'writing to file: spotfinder.txt'

buf = open('/u/xl/tjlane/analysis/spotfinder.txt', 'w')
#buf.write("# all units in inverse Angstrom\n")
buf.write("# rx\t\try\t\trz\t\tqx\t\tqy\t\tqz\t\tdx\t\tdy\n")
buf.write("# " + "--\t\t" * 8 + "\n")

# create a mask
mask = np.ones(CAMERA_SIZE, dtype=np.int8)
r = np.sqrt( np.sum( np.square( np.mgrid[0:CAMERA_SIZE[0],0:CAMERA_SIZE[1]] \
        - np.array(CAMERA_CENT)[:,None,None] ), axis=0 ))
mask[r < 25] = 0


for f in natsorted(files):

    # read the image file
    try:
        pitch = np.radians( float(f.split('Pitch-')[-1].split('_')[0]) - 122.0 )
    except:
        pitch = 0.0
    tif   = Image.open(f)
    img   = np.fromstring(tif.tostring(), 'H').reshape(512,512).T

    # find the blobs
    img = ndimage.filters.median_filter(img, 3)
    centers, widths = align.find_blobs(img * mask, discard_small_blobs=5,
                         sigma_threshold=3.5, discard_border=50)

    print 'pitch %f --> %d spots' % (pitch, len(centers))
    if len(centers) < 1: continue
    
    # compute geom of spots in recip space
    xy = np.array(centers) - np.array(CAMERA_CENT)
    z = np.ones(xy.shape[0]) * CAMERA_DIST
    xyz = np.vstack([xy.T, z.T]).T
    q_xyz = geo.real_to_recip(xyz, WAVELENGTH)

    # we measured the spot at q_xyz after a certain rotation
    # now rotate that vector back to the original ref frame
    
    # rotate to account for crystal orientation
    R = geo.rotate(-pitch, 0.0, 0.0)
    q_xyz = np.dot(R, q_xyz.T).T

    # meanwhile the cartesian position with origin of the IP
    r_xyz = np.vstack([xy.T, np.zeros(xy.shape[0]).T]).T
    r_xyz = np.dot(R, r_xyz.T).T

    # save spot positions
    for i,c in enumerate(centers):
        buf.write('%f\t%f\t%f\t%f\t%f\t%f\t%d\t%d\n' % \
                                           (r_xyz[i,0], r_xyz[i,1], r_xyz[i,2],
                                            q_xyz[i,0], q_xyz[i,1], q_xyz[i,2],
                                            widths[i][0], widths[i][1]))
buf.close()
print "finished spotfindin' -- check out home/analysis/spotfinder.txt"



