#!/usr/bin/env python

import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import sys

from electrolysis import geometry as geo

print 'Loading: %s' % sys.argv[-1]
spots = np.genfromtxt(sys.argv[-1])


#-------------
ap = 0.25
bp = 0.48
cp = 0.7

n_theta = 100
n_phi   = 90
#-------------


scores = np.zeros((n_theta * n_phi, 8))

theta = np.repeat(np.linspace(0.0, np.pi / 2.0, num=n_theta), n_phi)
phi   = np.tile(np.linspace(-np.pi, np.pi, num=n_phi), n_theta)

print 'computing q-dot-v'
v = geo.polar_to_cart( np.vstack([theta, phi]).T )
q = spots[:,3:6]
dq = np.dot(q,v)

print 'scoring results'
s_ap = np.sum( np.cos( 2.0 * np.pi * dq / ap ), axis=0 )
s_bp = np.sum( np.cos( 2.0 * np.pi * dq / bp ), axis=0 )
s_cp = np.sum( np.cos( 2.0 * np.pi * dq / cp ), axis=0 )

print dq.shape, s_ap.shape

#fig = plt.figure()
#ax = fig.add_subplot(111, projection='3d')
#for i in range(q.shape[0]):
#    ax.scatter( *q[i,:] )
#plt.show()


#fig = plt.figure(figsize=(15,5))

#for x in range(1,4):
#    ax = fig.add_subplot(1,3,x, projection='3d')
#    for i in range(scores.shape[0]):
#        ax.scatter(scores[i,0], scores[i,1], scores[i,2], c=scores[i,x+4])
#
#plt.show()

fig = plt.figure(figsize=(15,5))

ax1 = plt.subplot(131)
ax1.imshow(s_ap.reshape(n_theta, n_phi), interpolation='nearest')

ax2 = plt.subplot(132)
ax2.imshow(s_bp.reshape(n_theta, n_phi), interpolation='nearest')

ax3 = plt.subplot(133)
ax3.imshow(s_cp.reshape(n_theta, n_phi), interpolation='nearest')

plt.show()        


