#!/usr/bin/env python

import numpy as np
from glob import glob
from natsort import natsorted
from PIL import Image
from electrolysis import geometry as geo
from matplotlib import pyplot as plt

# -----------------------------------------------------------------------------
# geometry
CAMERA_DIST = 41250.0             # px
CAMERA_CENT = (264.0,245.5)       # pixels
CAMERA_SIZE = (512, 512)          # pixels
WAVELENGTH  = 0.0030              # Angstrom

# xtal setting
YAW    = np.radians(20.0)                         # for now
ROLL   = np.radians(30.0)
CUTOFF = 0.1 # hkl distance necessary to be a relp, may need to be anisotropic
# -----------------------------------------------------------------------------

# only bc orthorhombic

tp = 2.0 * np.pi
A = np.array([[tp/25.0,  0.0, 0.0 ],
              [ 0.0, tp/12.0, 0.0 ],
              [ 0.0,  0.0, tp/11.0]] )
Ap_inv = np.linalg.inv(A)


d_xyz  = geo.xyz_grid(CAMERA_SIZE, CAMERA_CENT, CAMERA_DIST)
dq_xyz = geo.real_to_recip(d_xyz.T.reshape(-1,3), WAVELENGTH)


files = glob('./ANDOR*.tif')
print 'located %d images...' % len(files)

for f in natsorted(files)[::25]:

    # read the image file
    pitch = np.radians( float(f.split('Pitch-')[-1].split('_')[0]) - 122.0 )
    tif   = Image.open(f)
    img   = np.fromstring(tif.tostring(), 'H').reshape(512,512).T

    R = geo.rotate(pitch, YAW, ROLL)
    dqr = np.dot(R, dq_xyz.T).T
    hkl = np.dot(Ap_inv, dqr.T).T

    delta = np.sqrt( np.sum( np.power(hkl % 1, 2), axis=1 ) )
    is_spot = (delta < CUTOFF)

    plt.figure()
    ax = plt.subplot(111)
    ax.imshow(img, vmax=5000, interpolation='nearest')
    for s in np.where(is_spot)[0]:
        x = s % 512
        y = s / 512
        c = plt.Circle((x,y), 5.0, color='orange', linewidth=2, fill=False)
        ax.add_patch(c)
    plt.show()
    



